package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

func generateBindFile(defPath, outDir string) (string, error) {
	goroot := os.Getenv("GOROOT")
	if goroot == "" {
		return "", errors.New("fail to get '$GOROOT'")
	}
	script := filepath.Join(goroot, "src", "syscall", "mksyscall_windows.go")
	tempOutPath := filepath.Join(outDir, "functions_windows.go")
	generateCommand := []string{"run", script, "-output", tempOutPath, defPath}
	cmd := exec.Command("go", generateCommand...)
	buf := bytes.NewBuffer(nil)
	cmd.Stdout = buf
	cmd.Stderr = buf
	if err := cmd.Run(); err != nil {
		b, _ := ioutil.ReadAll(buf)
		return "", fmt.Errorf("fail to execute 'mksyscall', %v \n\n%v", err, string(b))
	}

	out, err := ioutil.ReadFile(tempOutPath)
	if err != nil {
		return "", fmt.Errorf("fail to load generated file, %v", err)
	}

	return string(out), nil
}

func convert(generated string) string {
	// this phrase is generated on go1.10, go1.11 fixes this message
	replaced := strings.Replace(generated,
		"// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT",
		"// Code generated by the command above; DO NOT EDIT.", 1)

	replaced = strings.Replace(replaced,
		`windows.NewLazySystemDLL("menoh.dll")`,
		`syscall.NewLazyDLL("menoh.dll")`, 1)

	// Menoh is designed size -> pointer order.
	replaced = strings.Replace(replaced,
		`uintptr(unsafe.Pointer(_p1)), uintptr(len(dims))`,
		`uintptr(len(dims)), uintptr(unsafe.Pointer(_p1))`, -1)
	replaced = strings.Replace(replaced,
		`uintptr(unsafe.Pointer(_p1)), uintptr(len(values))`,
		`uintptr(len(values)), uintptr(unsafe.Pointer(_p1))`, -1)

	replaced = strings.Replace(replaced,
		"r1, _, e1 := syscall.Syscall",
		"r1, _, _ := syscall.Syscall", -1)
	replaced = strings.Replace(replaced, `if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}`, `if r1 != 0 {
		err = errnoErr(syscall.Errno(r1))
	}`, -1)

	return replaced
}

func format(srcPath string) error {
	cmd := exec.Command("goimports", "-w", srcPath)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("fail to apply 'goimports' for generated file: %v", err)
	}
	return nil
}

func main() {
	var (
		defPath = flag.String("def", "functions_bind_windows.go", "definition file path")
		outPath = flag.String("out", "functions_windows.go", "output file path")
	)
	flag.Parse()

	tempDir, err := ioutil.TempDir("", "go-menoh-")
	if err != nil {
		panic(fmt.Errorf("fail to make temp directory, %v", err))
	}
	defer func() {
		os.RemoveAll(tempDir)
	}()

	// generate bind file
	generated, err := generateBindFile(*defPath, tempDir)
	if err != nil {
		panic(err)
	}

	// replace to follow Menoh DLL library
	replaced := convert(string(generated))
	tempSavePath := filepath.Join(tempDir, "funcsions_windows.go")
	if err := ioutil.WriteFile(tempSavePath, []byte(replaced), 0644); err != nil {
		panic(fmt.Errorf("fail to save formatted bind file, %v", err))
	}

	// format
	if err := format(tempSavePath); err != nil {
		panic(err)
	}

	// save
	out, err := ioutil.ReadFile(tempSavePath)
	if err != nil {
		panic(fmt.Errorf("fail to read formatted bind file, %v", err))
	}
	if err := ioutil.WriteFile(*outPath, []byte(out), 0644); err != nil {
		panic(fmt.Errorf("fail to save generated file, %v", err))
	}
}
